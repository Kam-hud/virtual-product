import express from 'express'
import mysql from 'mysql2/promise'
import cors from 'cors'
import dotenv from 'dotenv'
import path from 'path'
import { fileURLToPath } from 'url'
import multer from 'multer'
import fs from 'fs'

// Ëß£ÂÜ≥ __dirname Âú® ES Ê®°Âùó‰∏≠ÁöÑÈóÆÈ¢ò
const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)

// Âä†ËΩΩÁéØÂ¢ÉÂèòÈáè
dotenv.config({ path: path.resolve(process.cwd(), '.env') })

const app = express()
const PORT = process.env.SERVER_PORT || 3001

// ÂàõÂª∫Êï∞ÊçÆÂ∫ìËøûÊé•Ê±†
const pool = mysql.createPool({
    host: process.env.DB_HOST || 'localhost',
    port: parseInt(process.env.DB_PORT) || 3306,
    user: process.env.DB_USER || 'root',
    password: process.env.DB_PASSWORD || '123456',
    database: process.env.DB_NAME || 'virtual_store',
    waitForConnections: true,
    connectionLimit: 10,
    queueLimit: 0,
})

// ÊµãËØïÊï∞ÊçÆÂ∫ìËøûÊé•
async function testDbConnection() {
    try {
        const connection = await pool.getConnection()
        console.log('‚úÖ ÊàêÂäüËøûÊé•Âà∞Êï∞ÊçÆÂ∫ì')
        connection.release()
    } catch (error) {
        console.error('‚ùå Êï∞ÊçÆÂ∫ìËøûÊé•Â§±Ë¥•:', error.message)
        process.exit(1)
    }
}

// Á°Æ‰øù‰∏ä‰º†ÁõÆÂΩïÂ≠òÂú®
const uploadDir = path.resolve(process.cwd(), 'uploads')
if (!fs.existsSync(uploadDir)) {
    fs.mkdirSync(uploadDir)
    console.log('üìÅ ÂàõÂª∫‰∏ä‰º†ÁõÆÂΩï: ', uploadDir)
}

// ÈÖçÁΩÆÊñá‰ª∂‰∏ä‰º†
const storage = multer.diskStorage({
    destination: (req, file, cb) => {
        cb(null, uploadDir)
    },
    filename: (req, file, cb) => {
        const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1e9)
        cb(null, file.fieldname + '-' + uniqueSuffix + path.extname(file.originalname))
    },
})

const upload = multer({
    storage,
    limits: { fileSize: 100 * 1024 * 1024 }, // 100MB
})

// CORS ÈÖçÁΩÆ
const corsOptions = {
    origin: 'http://localhost:5173', // ÂâçÁ´ØÂºÄÂèëÂú∞ÂùÄ
    methods: ['GET', 'POST', 'PUT', 'DELETE'],
    allowedHeaders: ['Content-Type', 'Authorization'],
    credentials: true,
    optionsSuccessStatus: 200,
}

// ‰∏≠Èó¥‰ª∂
app.use(cors(corsOptions))
app.use(express.json())
app.use(express.urlencoded({ extended: true }))

// Êèê‰æõÈùôÊÄÅÊñá‰ª∂ÊúçÂä°
app.use('/uploads', express.static(uploadDir))

// Áî®Êà∑Ê≥®ÂÜåÊé•Âè£
app.post('/api/register', upload.single('avatar'), async (req, res) => {
    const { username, email, password } = req.body
    const avatarFile = req.file

    // È™åËØÅÂøÖÂ°´Â≠óÊÆµ
    if (!username || !email || !password) {
        return res.status(400).json({ message: 'ËØ∑Êèê‰æõÂÆåÊï¥ÁöÑÊ≥®ÂÜå‰ø°ÊÅØ' })
    }

    try {
        console.log('---------------- Ê≥®ÂÜåËØ∑Ê±ÇÂºÄÂßã ----------------')
        console.log('Ê≥®ÂÜå‰ø°ÊÅØ:', {
            username,
            email,
            password: `[${password}]`,
            passwordLength: password.length,
        })

        // Ê£ÄÊü•ÈÇÆÁÆ±ÊòØÂê¶Â∑≤Â≠òÂú®
        const [existing] = await pool.query('SELECT * FROM users WHERE email = ? OR username = ?', [
            email,
            username,
        ])

        if (existing.length > 0) {
            console.log('‚ùå Áî®Êà∑ÂêçÊàñÈÇÆÁÆ±Â∑≤Ë¢´‰ΩøÁî®')
            return res.status(400).json({ message: 'Áî®Êà∑ÂêçÊàñÈÇÆÁÆ±Â∑≤Ë¢´‰ΩøÁî®' })
        }

        // Â§ÑÁêÜÂ§¥ÂÉèË∑ØÂæÑ
        let avatarPath = null
        if (avatarFile) {
            avatarPath = `/uploads/${avatarFile.filename}`
        }

        // ÂàõÂª∫Áî®Êà∑
        const [result] = await pool.query(
            `INSERT INTO users 
             (username, email, password, avatar) 
             VALUES (?, ?, ?, ?)`,
            [username, email, password, avatarPath],
        )

        console.log('‚úÖ Ê≥®ÂÜåÊàêÂäüÔºåÁî®Êà∑ID:', result.insertId)
        console.log('---------------- Ê≥®ÂÜåÁªìÊùü ----------------')

        res.status(201).json({
            message: 'Ê≥®ÂÜåÊàêÂäü',
            userId: result.insertId,
        })
    } catch (error) {
        console.error('‚ùå Ê≥®ÂÜåÈîôËØØ:', error)
        res.status(500).json({
            message: 'ÊúçÂä°Âô®ÂÜÖÈÉ®ÈîôËØØ',
            error: error.message,
            sql: error.sql,
        })
    }
})

// Áî®Êà∑ÁôªÂΩïÊé•Âè£
app.post('/api/login', async (req, res) => {
    const { email, password } = req.body

    if (!email || !password) {
        return res.status(400).json({ message: 'ËØ∑Êèê‰æõÈÇÆÁÆ±ÂíåÂØÜÁ†Å' })
    }

    try {
        console.log('---------------- ÁôªÂΩïËØ∑Ê±ÇÂºÄÂßã ----------------')
        console.log('Êé•Êî∂Âà∞ÁöÑÈÇÆÁÆ±:', email)
        console.log('Êé•Êî∂Âà∞ÁöÑÂØÜÁ†Å:', password)

        // Ê∏ÖÁêÜÈÇÆÁÆ±Ê†ºÂºè
        const cleanEmail = email.trim().toLowerCase()
        console.log('Ê∏ÖÁêÜÂêéÁöÑÈÇÆÁÆ±:', cleanEmail)

        // Êü•ÊâæÁî®Êà∑
        const [users] = await pool.query('SELECT * FROM users WHERE email = ?', [cleanEmail])

        console.log('Êü•ËØ¢ÁªìÊûúÊï∞Èáè:', users.length)

        if (users.length === 0) {
            console.log('‚ùå Êú™ÊâæÂà∞Áî®Êà∑')
            return res.status(401).json({ message: 'ÈÇÆÁÆ±ÊàñÂØÜÁ†ÅÈîôËØØ' })
        }

        const user = users[0]
        console.log('Êï∞ÊçÆÂ∫ì‰∏≠ÁöÑÁî®Êà∑:', {
            id: user.id,
            username: user.username,
            email: user.email,
            password: user.password,
            avatar: user.avatar,
        })

        // È™åËØÅÂØÜÁ†Å - Ê∑ªÂä†trimÂ§ÑÁêÜ
        const cleanInputPassword = password.trim()
        const cleanDBPassword = user.password.trim()
        const validPassword = cleanInputPassword === cleanDBPassword

        console.log('ÂØÜÁ†ÅÈ™åËØÅÁªìÊûú:', validPassword ? '‚úÖ ÊàêÂäü' : '‚ùå Â§±Ë¥•')
        console.log(`ËæìÂÖ•ÂØÜÁ†Å: "${cleanInputPassword}" (ÈïøÂ∫¶: ${cleanInputPassword.length})`)
        console.log(`Êï∞ÊçÆÂ∫ìÂØÜÁ†Å: "${cleanDBPassword}" (ÈïøÂ∫¶: ${cleanDBPassword.length})`)

        if (!validPassword) {
            console.log('‚ùå ÂØÜÁ†Å‰∏çÂåπÈÖç')
            return res.status(401).json({
                message: 'ÈÇÆÁÆ±ÊàñÂØÜÁ†ÅÈîôËØØ',
                debug: {
                    inputLength: cleanInputPassword.length,
                    dbLength: cleanDBPassword.length,
                },
            })
        }

        // ËøîÂõûÁî®Êà∑‰ø°ÊÅØÔºàÊéíÈô§ÂØÜÁ†ÅÔºâ
        const { password: _, ...userData } = user
        console.log('---------------- ÁôªÂΩïÊàêÂäü ----------------')

        // Á°Æ‰øùÂèëÈÄÅÂìçÂ∫î
        res.json(userData)
    } catch (error) {
        console.error('‚ùå ÁôªÂΩïÈîôËØØ:', error)

        // Á°Æ‰øùÂèëÈÄÅÈîôËØØÂìçÂ∫î
        res.status(500).json({
            message: 'ÊúçÂä°Âô®ÂÜÖÈÉ®ÈîôËØØ',
            error: error.message,
        })
    }
})

// Ëé∑ÂèñÊâÄÊúâÂïÜÂìÅÊé•Âè£
app.get('/api/products', async (req, res) => {
    try {
        const [rows] = await pool.query('SELECT * FROM product')
        res.json(rows)
    } catch (error) {
        console.error('‚ùå Ëé∑ÂèñÂïÜÂìÅÈîôËØØ:', error)
        res.status(500).json({
            message: 'ÊúçÂä°Âô®ÂÜÖÈÉ®ÈîôËØØ',
        })
    }
})

// Ëé∑ÂèñÂïÜÂìÅËØ¶ÊÉÖÊé•Âè£
app.get('/api/products/:id', async (req, res) => {
    const productId = req.params.id
    try {
        const [rows] = await pool.query('SELECT * FROM product WHERE id = ?', [productId])
        if (rows.length === 0) {
            return res.status(404).json({ message: 'ÂïÜÂìÅ‰∏çÂ≠òÂú®' })
        }
        res.json(rows[0])
    } catch (error) {
        console.error('‚ùå Ëé∑ÂèñÂïÜÂìÅËØ¶ÊÉÖÈîôËØØ:', error)
        res.status(500).json({
            message: 'ÊúçÂä°Âô®ÂÜÖÈÉ®ÈîôËØØ',
        })
    }
})

// Ëé∑ÂèñÁî®Êà∑Ë¥≠Áâ©ËΩ¶Êé•Âè£
app.get('/api/cart/:userId', async (req, res) => {
    const userId = req.params.userId
    try {
        const [rows] = await pool.query(
            `
            SELECT 
                cart.*, 
                product.name, 
                product.image, 
                product.price, 
                product.originalPrice,
                product.tag,
                product.description,
                product.details
            FROM cart
            LEFT JOIN product ON cart.product_id = product.id
            WHERE cart.user_id = ?
            `,
            [userId],
        )
        res.json(rows)
    } catch (error) {
        console.error('‚ùå Ëé∑ÂèñË¥≠Áâ©ËΩ¶ÈîôËØØ:', error)
        res.status(500).json({
            message: 'ÊúçÂä°Âô®ÂÜÖÈÉ®ÈîôËØØ',
        })
    }
})

// Ê∑ªÂä†ÂïÜÂìÅÂà∞Ë¥≠Áâ©ËΩ¶Êé•Âè£
app.post('/api/cart', async (req, res) => {
    const { userId, productId, quantity } = req.body

    if (!userId || !productId || !quantity) {
        return res.status(400).json({ message: 'ËØ∑Êèê‰æõÁî®Êà∑ID„ÄÅÂïÜÂìÅIDÂíåÊï∞Èáè' })
    }

    try {
        const [existing] = await pool.query('SELECT * FROM cart WHERE user_id = ? AND product_id = ?', [
            userId,
            productId,
        ])

        if (existing.length > 0) {
            const newQuantity = existing[0].quantity + quantity
            await pool.query('UPDATE cart SET quantity = ? WHERE id = ?', [newQuantity, existing[0].id])
            res.json({ message: 'Ë¥≠Áâ©ËΩ¶Â∑≤Êõ¥Êñ∞', cartId: existing[0].id })
        } else {
            const [result] = await pool.query(
                'INSERT INTO cart (user_id, product_id, quantity,selected) VALUES (?, ?, ?,?)',
                [userId, productId, quantity, true],
            )
            res.status(201).json({ message: 'Â∑≤Ê∑ªÂä†Âà∞Ë¥≠Áâ©ËΩ¶', cartId: result.insertId })
        }
    } catch (error) {
        console.error('‚ùå Ê∑ªÂä†Âà∞Ë¥≠Áâ©ËΩ¶ÈîôËØØ:', error)
        res.status(500).json({
            message: 'ÊúçÂä°Âô®ÂÜÖÈÉ®ÈîôËØØ',
        })
    }
})

// Êõ¥Êñ∞Ë¥≠Áâ©ËΩ¶ÂïÜÂìÅÊï∞Èáè
app.put('/api/cart/:cartId', async (req, res) => {
    const cartId = req.params.cartId
    const { quantity } = req.body

    try {
        await pool.query('UPDATE cart SET quantity = ? WHERE id = ?', [quantity, cartId])
        res.json({ message: 'Ë¥≠Áâ©ËΩ¶Â∑≤Êõ¥Êñ∞' })
    } catch (error) {
        console.error('‚ùå Êõ¥Êñ∞Ë¥≠Áâ©ËΩ¶ÈîôËØØ:', error)
        res.status(500).json({
            message: 'ÊúçÂä°Âô®ÂÜÖÈÉ®ÈîôËØØ',
        })
    }
})

// Âà†Èô§Ë¥≠Áâ©ËΩ¶ÂïÜÂìÅÊé•Âè£
app.delete('/api/cart/:cartId', async (req, res) => {
    const cartId = req.params.cartId
    try {
        await pool.query('DELETE FROM cart WHERE id = ?', [cartId])
        res.json({ message: 'Ë¥≠Áâ©ËΩ¶Â∑≤Âà†Èô§' })
    } catch (error) {
        console.error('‚ùå Âà†Èô§Ë¥≠Áâ©ËΩ¶ÈîôËØØ:', error)
        res.status(500).json({
            message: 'ÊúçÂä°Âô®ÂÜÖÈÉ®ÈîôËØØ',
        })
    }
})

// Ê∏ÖÁ©∫Ë¥≠Áâ©ËΩ¶Êé•Âè£
app.delete('/api/cart/:userId', async (req, res) => {
    const userId = req.params.userId
    try {
        await pool.query('DELETE FROM cart WHERE user_id = ?', [userId])
        res.json({ message: 'Ë¥≠Áâ©ËΩ¶Â∑≤Ê∏ÖÁ©∫' })
    } catch (error) {
        console.error('‚ùå Ê∏ÖÁ©∫Ë¥≠Áâ©ËΩ¶ÈîôËØØ:', error)
        res.status(500).json({
            message: 'ÊúçÂä°Âô®ÂÜÖÈÉ®ÈîôËØØ',
        })
    }
})

// ÂàáÊç¢Ë¥≠Áâ©ËΩ¶ÂïÜÂìÅÈÄâ‰∏≠Áä∂ÊÄÅ
app.put('/api/cart/:cartId', async (req, res) => {
    const cartId = req.params.cartId
    const { selected } = req.body
    try {
        await pool.query('UPDATE cart SET selected = ? WHERE id = ?', [selected, cartId])
        res.json({ message: 'Ë¥≠Áâ©ËΩ¶Â∑≤Êõ¥Êñ∞' })
    } catch (error) {
        console.error('‚ùå Êõ¥Êñ∞Ë¥≠Áâ©ËΩ¶ÈîôËØØ:', error)
        res.status(500).json({
            message: 'ÊúçÂä°Âô®ÂÜÖÈÉ®ÈîôËØØ',
        })
    }
})

// Êõ¥Êñ∞Ë¥≠Áâ©ËΩ¶ÂÖ®ÈÄâÁä∂ÊÄÅ
app.put('/api/cart/user/:userId/selection', async (req, res) => {
    const userId = req.params.userId
    const { selected } = req.body
    try {
        await pool.query('UPDATE cart SET selected = ? WHERE user_id = ?', [selected, userId])
        res.json({ message: 'Ë¥≠Áâ©ËΩ¶Â∑≤Êõ¥Êñ∞' })
    } catch (error) {
        console.error('‚ùå Êõ¥Êñ∞Ë¥≠Áâ©ËΩ¶ÈîôËØØ:', error)
        res.status(500).json({
            message: 'ÊúçÂä°Âô®ÂÜÖÈÉ®ÈîôËØØ',
        })
    }
})

// ÂÅ•Â∫∑Ê£ÄÊü•Á´ØÁÇπ
app.get('/api/health', (req, res) => {
    res.json({
        status: 'OK',
        timestamp: new Date().toISOString(),
        database: 'connected',
        uploadDir: uploadDir,
        serverPort: PORT,
        dbHost: process.env.DB_HOST,
    })
})

// Â§ÑÁêÜÊú™ÂåπÈÖçÁöÑË∑ØÁî±
app.use((req, res) => {
    res.status(404).json({
        message: 'Ë∑ØÁî±‰∏çÂ≠òÂú®',
        requestedUrl: req.originalUrl,
    })
})

// ÂÖ®Â±ÄÈîôËØØÂ§ÑÁêÜ
app.use((err, req, res, next) => {
    console.error('ÂÖ®Â±ÄÈîôËØØ:', err.stack)

    // Multer Êñá‰ª∂‰∏ä‰º†ÈîôËØØÂ§ÑÁêÜ
    if (err instanceof multer.MulterError) {
        return res.status(400).json({
            error: 'Êñá‰ª∂‰∏ä‰º†ÈîôËØØ',
            message: err.message,
        })
    }

    res.status(500).json({
        error: 'ÊúçÂä°Âô®ÂÜÖÈÉ®ÈîôËØØ',
        message: err.message || 'Êú™Áü•ÈîôËØØ',
    })
})

// ÂêØÂä®ÊúçÂä°Âô®
app.listen(PORT, async () => {
    console.log(`üöÄ ÊúçÂä°Âô®ËøêË°åÂú® http://localhost:${PORT}`)
    console.log(`üìÅ Êñá‰ª∂‰∏ä‰º†ÁõÆÂΩï: ${uploadDir}`)
    console.log(`üåê CORS ÂÖÅËÆ∏ÁöÑÊ∫ê: http://localhost:5173`)

    await testDbConnection()
})
